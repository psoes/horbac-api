package com.uds.horbac.core.service.users;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.uds.horbac.core.dao.users.UserRepository;
import com.uds.horbac.core.entities.employees.Employee;
import com.uds.horbac.core.entities.users.User;
import com.uds.horbac.core.exceptions.ApiException;

/**
* Generated by Spring Data Generator on 31/12/2020
*/
@Service
public class UserService implements UserDetailsService{
	//private final Logger logger = LoggerFactory.getLogger(UserService.class);
	
	/*@Autowired
	private ImageStorageService imageStorageService;
	*/
	
	@Autowired
	private PasswordEncoder passwordEncoder;
	
	@Autowired
	private UserRepository userRepository;

	@Transactional
	public User create(User user0){
		//User user_new = new User(user0.getId(), user0.getUsername(), passwordEncoder.encode(user0.getPassword()), user0.getActive(), user0.getPerson(), true, true, true, true);
		User user_new = new User();
		user_new.setId(null);
		user_new.setActive(true);
		user_new.setAccountNonExpired(true);
		user_new.setAccountNonLocked(true);
		user_new.setCredentialsNonExpired(true);
		user_new.setEnabled(true);
		/*
		!user.isAccountNonLocked()
		!user.isEnabled()
		!user.isAccountNonExpired()
		!user.isCredentialsNonExpired()
		*/
		user_new.setUsername(user0.getUsername());
		user_new.setPassword(passwordEncoder.encode(user0.getPassword()));
		user_new.setEmail(user0.getEmail());
		
		if(userRepository.existsByUsername(user0.getUsername())) {
			
			System.out.println("PROBLEME");
		}
		return userRepository.save(user_new);
	}

	public boolean remove(Long id) {
		Optional<User> user = userRepository.findById(id);
		if(user.isPresent()) {
			userRepository.delete(user.get());
			return true;
		} else {
			return false;
		}
	}

	
	public User toggleActive(Long id) throws ApiException {
		Optional<User> user = userRepository.findById(id);
		if(user.isPresent()) {
			User aUser = user.get();
			aUser.setActive(!aUser.getActive());
			return userRepository.save(aUser);
		} else {
			throw new ApiException("User not found");
		}
	}

	public User updatePassword(Long idUser, String oldPassword, String newPassword) throws ApiException {
		Optional<User> user = userRepository.findById(idUser);
		if(user.isPresent()) {
			User aUser = user.get();
			String encode_newpwd = passwordEncoder.encode(newPassword);
			//String encode_oldpwd = passwordEncoder.encode(oldPassword);
			
			//test if the passwords match!!
			
			if(passwordEncoder.matches(oldPassword, aUser.getPassword())) {
				aUser.setPassword(encode_newpwd);
				return userRepository.save(aUser);
			} else {
				System.out.println("PASWORD DOES NOT MATCH............."+oldPassword+"   "+aUser.getPassword());
				throw new ApiException("Bad password");
			}
		} else {
			throw new ApiException("Account not found");
		}
	}

	public User resetPassword(Long idUser, String newPassword) throws ApiException {
		Optional<User> user = userRepository.findById(idUser);
		if(user.isPresent()) {
			User aUser = user.get();
			aUser.setPassword(passwordEncoder.encode(newPassword));
			return userRepository.save(aUser);
		} else {
			throw new ApiException("Account not found");
		}
	}

	public User get(Long id) throws ApiException {
		try {
			Optional<User> optionalUser = userRepository.findById(id);
			if(optionalUser.isPresent()) {
				return optionalUser.get();
			} else {
				throw new ApiException("Account not found");
			}
		} catch (IllegalArgumentException e) {
			throw new ApiException("Account not found");
		}
	}

	
	
	public boolean existsByUserName(String name) {
		return userRepository.existsByUsername(name);
	}

	public List<User> getAll() {
		return userRepository.findAll();
	}

	public List<User> filterUsers(String query) {
		return userRepository.filterUsers(query);
	}

/*
	public Resource getAvatar(Long userId) throws ApiException {
		User user = this.get(userId);
		if(user.getPerson() != null && user.getPerson().getPhotoPath() != null) {
			return imageStorageService.loadImageAsResource(user.getPerson().getPhotoPath());
		}
		else {
			throw U2gGlobals.throwError(U2gConstants.IMAGE_NOT_FOUND, HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
	*/

	public Optional<User> getUserByEmployee(Employee employee) {
		return userRepository.findByEmployee(employee);
	}

	@Override
	public User loadUserByUsername(String username){
		try {
			User us = userRepository.findByUsername(username).get();
			return us;
		}catch(Exception e) {
			return null;
		}
		
	}
	
	
}
