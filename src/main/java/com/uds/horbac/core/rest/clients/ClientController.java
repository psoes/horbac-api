package com.uds.horbac.core.rest.clients;

import java.util.List;
import java.util.stream.Collectors;

import javax.validation.Valid;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.uds.horbac.core.dto.clients.ClientDTO;
import com.uds.horbac.core.entities.clients.Client;
import com.uds.horbac.core.service.clients.ClientService;

/**
 * The default REST controller logic
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Fid√®le
 */
@RestController
public class ClientController {
    
    protected @Autowired ClientService service;    
    protected @Autowired ModelMapper modelMapper;
    
    @GetMapping(value = "/clients")
    public List<ClientDTO> get(@RequestParam(value = "start", defaultValue = "0") long start, @RequestParam(value = "limit", defaultValue = "25") long limit) {
    	return service.getAll().stream()
				.map(clt -> modelMapper.map(clt, ClientDTO.class))
				.collect(Collectors.toList());
    }
    
    @GetMapping("/clients/{id}")
	@ResponseStatus(value=HttpStatus.OK)
	public ClientDTO getClientById(@PathVariable Long id){
		return modelMapper.map(service.getClient(id), ClientDTO.class);
	}
	
	@PostMapping("/clients")
	@ResponseStatus(value=HttpStatus.CREATED)
	public ClientDTO createClient(@Valid @RequestBody ClientDTO cltDTO){
		//if(orgDTO.getUrl() != null) {orgDTO.setUrl(new URL(orgDTO.getUrl()));
		Client clt = modelMapper.map(cltDTO, Client.class);
		
		return modelMapper.map(service.save(clt), ClientDTO.class);
	}
	
	@PutMapping("/clients")
	@ResponseStatus(value=HttpStatus.OK)
	public ClientDTO  updateClient(@Valid @RequestBody ClientDTO cltDTO) {		
		Client clt = modelMapper.map(cltDTO, Client.class);		
		return modelMapper.map(service.save(clt), ClientDTO.class);
	}
	
	@DeleteMapping(value = "/clients/{id}")
	@ResponseStatus(value=HttpStatus.OK)
	public void delete(@PathVariable Long id){
		service.delete(id);
	}

}