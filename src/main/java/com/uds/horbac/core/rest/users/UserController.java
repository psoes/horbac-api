package com.uds.horbac.core.rest.users;

import java.util.List;
import java.util.stream.Collectors;

import javax.validation.Valid;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.uds.horbac.core.dto.users.UserDTO;
import com.uds.horbac.core.dto.users.UserPasswordDTO;
import com.uds.horbac.core.entities.users.User;
import com.uds.horbac.core.exceptions.ApiException;
import com.uds.horbac.core.service.users.UserService;

/**
 * The default REST controller logic
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 */
@RestController
public class UserController {
    
	@Autowired
	private ModelMapper modelMapper;
	
	@Autowired
	private UserService userService;
	
	@PostMapping("/users")
	@ResponseStatus(value=HttpStatus.CREATED)
	public UserDTO saveUser(@RequestBody UserDTO userDTO){
		User user = modelMapper.map(userDTO, User.class);
		user = userService.create(user);
		return modelMapper.map(user, UserDTO.class);
	}
	
	@GetMapping("/users")
	@ResponseStatus(value=HttpStatus.OK)
	public List<UserDTO> getAll() throws ApiException {
		return userService.getAll()
			.stream()
			.filter(User::getActive)
			.map(user -> modelMapper.map(user, UserDTO.class))
			.collect(Collectors.toList());
	}
	@GetMapping("/users/all")
	@ResponseStatus(value=HttpStatus.OK)
	public List<UserDTO> getAllWIthAdmin() throws ApiException {
		return userService.getAll()
			.stream()
			.map(user -> modelMapper.map(user, UserDTO.class))
			.collect(Collectors.toList());
	}
	
	@GetMapping("/users/filter")
	@ResponseStatus(value=HttpStatus.OK)
	public List<UserDTO> filterUsers(@RequestParam("query") String query) {
		return userService.filterUsers(query)
			.stream()
			.filter(User::getActive)
			.map(user -> modelMapper.map(user, UserDTO.class))
			.collect(Collectors.toList());
	}
		
	@PostMapping("/users/activate/toggle/{id}")
	@ResponseStatus(value=HttpStatus.OK)
	public UserDTO toggleActive(@PathVariable(name="id") Long idUser) throws ApiException {
		User user = userService.toggleActive(idUser);
		return modelMapper.map(user, UserDTO.class);
	}
	
	@DeleteMapping("/users/{id}")
	@ResponseStatus(value=HttpStatus.OK)
	public void deleteUser(@PathVariable(name="id") Long idUser) throws ApiException {
		if(!userService.remove(idUser)) {
			throw new ApiException("Account not found");
		}
	}

	@PostMapping("/users/password/update/{id}")
	@ResponseStatus(value=HttpStatus.OK)
	public UserDTO updatePassword(@PathVariable(name="id") Long idUser, @Valid @RequestBody UserPasswordDTO userPasswordDTO) throws ApiException {
		if(userPasswordDTO.getOldPassword() != null && !userPasswordDTO.getOldPassword().isEmpty()) {
			User user = userService.updatePassword(idUser, userPasswordDTO.getOldPassword(), userPasswordDTO.getNewPassword());
			return modelMapper.map(user, UserDTO.class);
		} else {
			throw new ApiException("Old password is required");
		}		
	}

	@PostMapping("/users/password/reset/{id}")
	@ResponseStatus(value=HttpStatus.OK)
	public UserDTO resetPassword(@PathVariable(name="id") Long idUser, @Valid @RequestBody UserPasswordDTO userPasswordDTO) throws ApiException {
		User user = userService.resetPassword(idUser, userPasswordDTO.getNewPassword());
		return modelMapper.map(user, UserDTO.class);
	}

}