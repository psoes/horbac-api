package com.uds.horbac.core.rest.users;

import static org.springframework.web.bind.annotation.RequestMethod.GET;

import java.util.List;
import java.util.stream.Collectors;

import javax.validation.Valid;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.uds.horbac.core.dto.users.UserDTO;
import com.uds.horbac.core.entities.users.User;
import com.uds.horbac.core.service.users.UserService;

/**
 * The default REST controller logic
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 */
@RestController
public class UserController {
    
	protected @Autowired UserService service;    
    protected @Autowired ModelMapper modelMapper;
    
    @RequestMapping(value = "/users", method = GET)
    public List<UserDTO> getAll(@RequestParam(value = "start", defaultValue = "0") long start, @RequestParam(value = "limit", defaultValue = "25") long limit) {
    	return service.getAll().stream()
				.map(clt -> modelMapper.map(clt, UserDTO.class))
				.collect(Collectors.toList());
    }
    
    @GetMapping("/users/{id}")
   	@ResponseStatus(value=HttpStatus.OK)
   	public UserDTO getExternelIdById(@PathVariable Long id){
   		return modelMapper.map(service.getUser(id), UserDTO.class);
   	}
   	
   	@PostMapping("/users")
   	@ResponseStatus(value=HttpStatus.CREATED)
   	public UserDTO createUser(@Valid @RequestBody UserDTO userDTO){
   		User clt = modelMapper.map(userDTO, User.class);
   		
   		return modelMapper.map(service.save(clt), UserDTO.class);
   	}
   	
   	@PutMapping("/users")
   	@ResponseStatus(value=HttpStatus.OK)
   	public UserDTO  updateUser(@Valid @RequestBody UserDTO userDTO) {		
   		User clt = modelMapper.map(userDTO, User.class);		
   		return modelMapper.map(service.save(clt), UserDTO.class);
   	}
   	
   	@DeleteMapping(value = "/users/{id}")
   	@ResponseStatus(value=HttpStatus.OK)
   	public void delete(@PathVariable Long id){
   		service.delete(id);
   	}
}